function [w,f,normgrad] = sLBFGS(fun,gfun,Xtrain,w,bsz,kmax,tol)

m = 5; % the number of steps to keep in memory
gam = 0.9; % line search step factor
jmax = ceil(log(1e-14)/log(gam)); % max # of iterations in line search
eta = 0.5; % backtracking stopping criterion factor
bszh = 8*bsz; 
%% 
[n, ~] = size(Xtrain); 
I = randperm(n,bsz)'; 
Ih = randperm(n,bszh)';
s = zeros(length(w),m);
y = zeros(length(w),m);
rho = zeros(1,m);
f = zeros(kmax+1,1);
normgrad = zeros(kmax+1,1);
g = zeros(size(w));
g(:) = gfun(I,w); 
gh = gfun(Ih,w); 
normgrad(1) = norm(g);
f(1) = fun(I,w);
% first do steepest decend step
a = linesearch(w,-g,g,fun,I,eta,gam,jmax);
alpha = @(iter) 20/(100+iter);
wp = w;
w(:) = w - a*g;
gp = gh; 
I = randperm(n,bszh)'; 
gh(:) = gfun(Ih,w);
s(:,1) = w - wp;
y(:,1) = gh - gp;
rho(1) = 1/(s(:,1)'*y(:,1));
nor = norm(g);
normgrad(2) = nor;
f(2) = fun(I,w);
iter = 1;
Hiter = 1; 
while nor > tol
    I = randperm(n,bsz)';
    g(:) = gfun(I,w);

    if Hiter < m
        K = 1 : Hiter;
        p = finddirection(g,s(:,K),y(:,K),rho(K));
    else 
        p = finddirection(g,s,y,rho);
    end
    
    step = alpha(iter)*p;
    w = w + step;
    
    if mod(iter,10)==0
    s = circshift(s,[0,1]); 
    y = circshift(y,[0,1]);
    rho = circshift(rho,[0,1]);
    s(:,1) = w-wp;
    I = randperm(n,bszh)'; 
    gh(:) = gfun(Ih,w);
    y(:,1) = gh - gp;
    gp(:) = gh;
    wp(:) = w; 
    rho(1) = 1/(s(:,1)'*y(:,1));
    Hiter= 1; 
    end
    
    
    nor = norm(g);
    iter = iter + 1;
    Hiter =Hiter+1; 
    normgrad(iter+1) = nor;
    f(iter+1) = fun(I,w);
    
    if mod(iter+1,100)==0
        fprintf('iter = %d, f = %d, ||g|| = %d\n',iter+1, f(iter+1),normgrad(iter+1));
    end
    
end
fprintf('L-BFGS: %d iterations, norm(g) = %d\n',iter,nor);


end
function [a,j] = linesearch(x,p,g,func,I,eta,gam,jmax)
    a = 1;
    f0 = func(I,x);
    aux = eta*g'*p;
    for j = 0 : jmax
        xtry = x + a*p;
        f1 = func(I,xtry);
        if f1 < f0 + a*aux
            break;
        else
            a = a*gam;
        end
    end
end
%%
function p = finddirection(g,s,y,rho)
% input: g = gradient dim-by-1
% s = matrix dim-by-m, s(:,i) = x_{k-i+1}-x_{k-i}
% y = matrix dim-by-m, y(:,i) = g_{k-i+1}-g_{k-i}
% rho is 1-by-m, rho(i) = 1/(s(:,i)'*y(:,i))
m = size(s,2);
a = zeros(m,1);  
for i = 1 : m
    a(i) = rho(i)*s(:,i)'*g;
    g = g - a(i)*y(:,i);
end
gam = s(:,1)'*y(:,1)/(y(:,1)'*y(:,1)); % H0 = gam*eye(dim)
g = g*gam;
for i = m :-1 : 1
    aux = rho(i)*y(:,i)'*g;
    g = g + (a(i) - aux)*s(:,i);
end
p = -g;
end